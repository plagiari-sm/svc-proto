// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enrich/grpc_enrich.proto

package mediawatch_io_enrich

/*
Package name (~DNS)
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Lang                 string   `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_enrich_c30322eed7d4e942, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Request) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type Entity struct {
	EntityText           string   `protobuf:"bytes,1,opt,name=entity_text,json=entityText,proto3" json:"entity_text,omitempty"`
	EntityType           string   `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_enrich_c30322eed7d4e942, []int{1}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (dst *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(dst, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetEntityText() string {
	if m != nil {
		return m.EntityText
	}
	return ""
}

func (m *Entity) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

type NLP struct {
	Stopwords            []string  `protobuf:"bytes,1,rep,name=stopwords,proto3" json:"stopwords,omitempty"`
	Keywords             []string  `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Entities             []*Entity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	Topics               []string  `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NLP) Reset()         { *m = NLP{} }
func (m *NLP) String() string { return proto.CompactTextString(m) }
func (*NLP) ProtoMessage()    {}
func (*NLP) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_enrich_c30322eed7d4e942, []int{2}
}
func (m *NLP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NLP.Unmarshal(m, b)
}
func (m *NLP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NLP.Marshal(b, m, deterministic)
}
func (dst *NLP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NLP.Merge(dst, src)
}
func (m *NLP) XXX_Size() int {
	return xxx_messageInfo_NLP.Size(m)
}
func (m *NLP) XXX_DiscardUnknown() {
	xxx_messageInfo_NLP.DiscardUnknown(m)
}

var xxx_messageInfo_NLP proto.InternalMessageInfo

func (m *NLP) GetStopwords() []string {
	if m != nil {
		return m.Stopwords
	}
	return nil
}

func (m *NLP) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *NLP) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *NLP) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type Data struct {
	Nlp                  *NLP     `protobuf:"bytes,1,opt,name=nlp,proto3" json:"nlp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_enrich_c30322eed7d4e942, []int{3}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (dst *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(dst, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetNlp() *NLP {
	if m != nil {
		return m.Nlp
	}
	return nil
}

type Response struct {
	// success, error
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// data Object {}
	Data                 *Data    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_enrich_c30322eed7d4e942, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "mediawatch.io.enrich.Request")
	proto.RegisterType((*Entity)(nil), "mediawatch.io.enrich.Entity")
	proto.RegisterType((*NLP)(nil), "mediawatch.io.enrich.NLP")
	proto.RegisterType((*Data)(nil), "mediawatch.io.enrich.Data")
	proto.RegisterType((*Response)(nil), "mediawatch.io.enrich.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnrichClient is the client API for Enrich service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnrichClient interface {
	NLP(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type enrichClient struct {
	cc *grpc.ClientConn
}

func NewEnrichClient(cc *grpc.ClientConn) EnrichClient {
	return &enrichClient{cc}
}

func (c *enrichClient) NLP(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mediawatch.io.enrich.Enrich/NLP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichServer is the server API for Enrich service.
type EnrichServer interface {
	NLP(context.Context, *Request) (*Response, error)
}

func RegisterEnrichServer(s *grpc.Server, srv EnrichServer) {
	s.RegisterService(&_Enrich_serviceDesc, srv)
}

func _Enrich_NLP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichServer).NLP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediawatch.io.enrich.Enrich/NLP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichServer).NLP(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Enrich_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediawatch.io.enrich.Enrich",
	HandlerType: (*EnrichServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NLP",
			Handler:    _Enrich_NLP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enrich/grpc_enrich.proto",
}

func init() {
	proto.RegisterFile("enrich/grpc_enrich.proto", fileDescriptor_grpc_enrich_c30322eed7d4e942)
}

var fileDescriptor_grpc_enrich_c30322eed7d4e942 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xfd, 0x95, 0xf6, 0xc7, 0x9f, 0xe1, 0xb6, 0x31, 0x66, 0x25, 0xa8, 0xa4, 0x27, 0x12, 0x93,
	0x1a, 0xe1, 0xe2, 0x07, 0x50, 0x0f, 0x86, 0x10, 0xb2, 0xf1, 0x4e, 0x96, 0x76, 0x02, 0x8d, 0xd0,
	0x5d, 0xbb, 0x43, 0xa0, 0x37, 0xbf, 0x82, 0xdf, 0xd8, 0xec, 0x6e, 0x41, 0x0f, 0xf5, 0xf6, 0xe6,
	0xcd, 0xdb, 0x97, 0x99, 0x37, 0x0b, 0x1c, 0x8b, 0x32, 0x4f, 0x37, 0xf7, 0xeb, 0x52, 0xa7, 0x4b,
	0x8f, 0x13, 0x5d, 0x2a, 0x52, 0xec, 0x62, 0x87, 0x59, 0x2e, 0x0f, 0x92, 0xd2, 0x4d, 0x92, 0xab,
	0xc4, 0xf7, 0xe2, 0x07, 0xe8, 0x08, 0xfc, 0xd8, 0xa3, 0x21, 0xc6, 0x20, 0x5a, 0xa9, 0xac, 0xe2,
	0xc1, 0x28, 0x18, 0xf7, 0x84, 0xc3, 0x96, 0xdb, 0xca, 0x62, 0xcd, 0x5b, 0x9e, 0xb3, 0x38, 0x7e,
	0x85, 0xf6, 0x73, 0x41, 0x39, 0x55, 0xec, 0x16, 0xfa, 0xe8, 0xd0, 0x92, 0xf0, 0x48, 0xf5, 0x43,
	0xf0, 0xd4, 0x1b, 0x1e, 0xe9, 0xb7, 0xa0, 0xd2, 0x58, 0xbb, 0x9c, 0x04, 0x95, 0xc6, 0xf8, 0x2b,
	0x80, 0x70, 0x3e, 0x5b, 0xb0, 0x21, 0xf4, 0x0c, 0x29, 0x7d, 0x50, 0x65, 0x66, 0x78, 0x30, 0x0a,
	0xc7, 0x3d, 0xf1, 0x43, 0xb0, 0x01, 0x74, 0xdf, 0xb1, 0xf2, 0xcd, 0x96, 0x6b, 0x9e, 0x6b, 0xf6,
	0x08, 0x5d, 0xe7, 0x97, 0xa3, 0xe1, 0xe1, 0x28, 0x1c, 0xf7, 0x27, 0xc3, 0xa4, 0x69, 0xd3, 0xc4,
	0xcf, 0x2c, 0xce, 0x6a, 0x76, 0x09, 0x6d, 0x52, 0x3a, 0x4f, 0x0d, 0x8f, 0x9c, 0x67, 0x5d, 0xc5,
	0x53, 0x88, 0x9e, 0x24, 0x49, 0x76, 0x07, 0x61, 0xb1, 0xd5, 0x6e, 0xab, 0xfe, 0xe4, 0xaa, 0xd9,
	0x74, 0x3e, 0x5b, 0x08, 0xab, 0x8a, 0x3f, 0x03, 0xe8, 0x0a, 0x34, 0x5a, 0x15, 0x06, 0xad, 0xb3,
	0x21, 0x49, 0x7b, 0x53, 0x47, 0x52, 0x57, 0x36, 0xcd, 0x54, 0x65, 0x3e, 0x87, 0xff, 0xc2, 0x61,
	0xc6, 0xa1, 0xb3, 0x43, 0x63, 0xe4, 0x1a, 0x79, 0xe8, 0xc4, 0xa7, 0x92, 0x25, 0x10, 0x65, 0x92,
	0x24, 0x8f, 0xdc, 0x00, 0x83, 0xe6, 0x01, 0xec, 0xa4, 0xc2, 0xe9, 0x26, 0x0b, 0x7b, 0x17, 0x4b,
	0xb2, 0x17, 0x1f, 0xea, 0x75, 0xf3, 0x93, 0xfa, 0xde, 0x83, 0x9b, 0xbf, 0xda, 0x7e, 0x8b, 0xf8,
	0xdf, 0xaa, 0xed, 0x7e, 0xce, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x88, 0x17, 0x48, 0x5f, 0x55,
	0x02, 0x00, 0x00,
}
