// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plagiarism/grpc_plagiarism.proto

/*
Package plagiari_sm_grpc_plagiarism is a generated protocol buffer package.

Package name (~DNS)

It is generated from these files:
	plagiarism/grpc_plagiarism.proto

It has these top-level messages:
	RequestDocument
	Notification
*/
package plagiari_sm_grpc_plagiarism

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestDocument from Elasticsearch
type RequestDocument struct {
	// article id
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestDocument) Reset()                    { *m = RequestDocument{} }
func (m *RequestDocument) String() string            { return proto.CompactTextString(m) }
func (*RequestDocument) ProtoMessage()               {}
func (*RequestDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestDocument) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Notification
type Notification struct {
	// success, error
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// label
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// article id
	Id int64 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Notification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Notification) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Notification) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestDocument)(nil), "plagiari.sm.grpc.plagiarism.RequestDocument")
	proto.RegisterType((*Notification)(nil), "plagiari.sm.grpc.plagiarism.Notification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Plagiarism service

type PlagiarismClient interface {
	// Endpoint Detect
	Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error)
}

type plagiarismClient struct {
	cc *grpc.ClientConn
}

func NewPlagiarismClient(cc *grpc.ClientConn) PlagiarismClient {
	return &plagiarismClient{cc}
}

func (c *plagiarismClient) Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := grpc.Invoke(ctx, "/plagiari.sm.grpc.plagiarism.Plagiarism/Detect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Plagiarism service

type PlagiarismServer interface {
	// Endpoint Detect
	Detect(context.Context, *RequestDocument) (*Notification, error)
}

func RegisterPlagiarismServer(s *grpc.Server, srv PlagiarismServer) {
	s.RegisterService(&_Plagiarism_serviceDesc, srv)
}

func _Plagiarism_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiari.sm.grpc.plagiarism.Plagiarism/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismServer).Detect(ctx, req.(*RequestDocument))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plagiarism_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plagiari.sm.grpc.plagiarism.Plagiarism",
	HandlerType: (*PlagiarismServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Plagiarism_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plagiarism/grpc_plagiarism.proto",
}

func init() { proto.RegisterFile("plagiarism/grpc_plagiarism.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x6d, 0x77, 0x5b, 0x71, 0x10, 0x85, 0x41, 0x24, 0xe8, 0xa5, 0xf6, 0xb4, 0x82, 0x44,
	0xd0, 0x57, 0xd8, 0xb3, 0x48, 0x5e, 0x40, 0xd2, 0x74, 0x2c, 0x81, 0xa6, 0x69, 0x9b, 0xe9, 0xc5,
	0xa7, 0x17, 0x63, 0x6b, 0x65, 0x0f, 0xbd, 0xe5, 0xfb, 0xf9, 0xe0, 0xcf, 0x3f, 0x50, 0xf4, 0xad,
	0x6e, 0xac, 0x1e, 0x6d, 0x70, 0xcf, 0xcd, 0xd8, 0x9b, 0x8f, 0x95, 0x65, 0x3f, 0x7a, 0xf6, 0x78,
	0xbf, 0x24, 0x32, 0x38, 0xf9, 0xa3, 0xc8, 0x55, 0x29, 0x1f, 0xe0, 0x5a, 0xd1, 0x30, 0x51, 0xe0,
	0xa3, 0x37, 0x93, 0xa3, 0x8e, 0xf1, 0x0a, 0x52, 0x5b, 0x8b, 0xa4, 0x48, 0x0e, 0x3b, 0x95, 0xda,
	0xba, 0xfc, 0x82, 0xcb, 0x37, 0xcf, 0xf6, 0xd3, 0x1a, 0xcd, 0xd6, 0x77, 0x78, 0x0b, 0x79, 0x60,
	0xcd, 0x53, 0x88, 0xce, 0x85, 0x9a, 0x09, 0x11, 0xf6, 0xc6, 0xd7, 0x24, 0xd2, 0x22, 0x39, 0x64,
	0x2a, 0xbe, 0x51, 0xc0, 0xb9, 0xa3, 0x10, 0x74, 0x43, 0x62, 0x17, 0xe5, 0x05, 0xf1, 0x06, 0xb2,
	0x56, 0x57, 0xd4, 0x8a, 0x7d, 0xcc, 0x7f, 0x61, 0xee, 0xce, 0x96, 0xee, 0x97, 0x01, 0xe0, 0xfd,
	0xef, 0xb3, 0x68, 0x20, 0x3f, 0x12, 0x93, 0x61, 0x7c, 0x92, 0x1b, 0xa3, 0xe4, 0xc9, 0xa2, 0xbb,
	0xc7, 0x4d, 0xfb, 0xff, 0xb8, 0xf2, 0xac, 0xca, 0xe3, 0xd5, 0x5e, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x35, 0x0e, 0x9c, 0xdd, 0x59, 0x01, 0x00, 0x00,
}
