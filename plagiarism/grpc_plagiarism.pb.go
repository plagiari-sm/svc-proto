// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_plagiarism.proto

/*
Package plagiari_sm_grpc_plagiarism is a generated protocol buffer package.

Package name (~DNS)

It is generated from these files:
	grpc_plagiarism.proto

It has these top-level messages:
	RequestDocument
	Notification
*/
package plagiari_sm_grpc_plagiarism

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestDocument from Elasticsearch
type RequestDocument struct {
	// article id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestDocument) Reset()                    { *m = RequestDocument{} }
func (m *RequestDocument) String() string            { return proto.CompactTextString(m) }
func (*RequestDocument) ProtoMessage()               {}
func (*RequestDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Notification
type Notification struct {
	// success, error
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// label
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// article id
	Id string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Notification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Notification) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestDocument)(nil), "plagiari.sm.grpc.plagiarism.RequestDocument")
	proto.RegisterType((*Notification)(nil), "plagiari.sm.grpc.plagiarism.Notification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Plagiarism service

type PlagiarismClient interface {
	// Endpoint Detect
	Detect(ctx context.Context, in *RequestDocument, opts ...client.CallOption) (*Notification, error)
}

type plagiarismClient struct {
	c           client.Client
	serviceName string
}

func NewPlagiarismClient(serviceName string, c client.Client) PlagiarismClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "plagiari.sm.grpc.plagiarism"
	}
	return &plagiarismClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *plagiarismClient) Detect(ctx context.Context, in *RequestDocument, opts ...client.CallOption) (*Notification, error) {
	req := c.c.NewRequest(c.serviceName, "Plagiarism.Detect", in)
	out := new(Notification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Plagiarism service

type PlagiarismHandler interface {
	// Endpoint Detect
	Detect(context.Context, *RequestDocument, *Notification) error
}

func RegisterPlagiarismHandler(s server.Server, hdlr PlagiarismHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Plagiarism{hdlr}, opts...))
}

type Plagiarism struct {
	PlagiarismHandler
}

func (h *Plagiarism) Detect(ctx context.Context, in *RequestDocument, out *Notification) error {
	return h.PlagiarismHandler.Detect(ctx, in, out)
}

func init() { proto.RegisterFile("grpc_plagiarism.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0x85, 0x40,
	0x14, 0x86, 0xd3, 0xd4, 0xe8, 0x10, 0x05, 0x87, 0x8a, 0xa1, 0x36, 0xe6, 0xca, 0x20, 0x66, 0x51,
	0xaf, 0xe0, 0x3a, 0xc2, 0x17, 0x88, 0x71, 0x3c, 0xc9, 0x80, 0xe3, 0xa8, 0x73, 0xdc, 0xf4, 0xf4,
	0xd1, 0xa4, 0xdd, 0xcb, 0x5d, 0xb8, 0x9b, 0xff, 0xe7, 0x83, 0x7f, 0xbe, 0x03, 0x77, 0xdd, 0x3c,
	0xea, 0xcf, 0xb1, 0x57, 0x9d, 0x51, 0xb3, 0xf1, 0x56, 0x8e, 0xb3, 0x63, 0x87, 0x8f, 0x5b, 0x23,
	0xbd, 0x95, 0xbf, 0x88, 0x3c, 0x20, 0xc5, 0x13, 0xdc, 0xd4, 0x34, 0x2d, 0xe4, 0xb9, 0x72, 0x7a,
	0xb1, 0x34, 0x30, 0x5e, 0x43, 0x6c, 0x5a, 0x11, 0xe5, 0x51, 0x79, 0x59, 0xc7, 0xa6, 0x2d, 0xbe,
	0xe1, 0xea, 0xdd, 0xb1, 0xf9, 0x32, 0x5a, 0xb1, 0x71, 0x03, 0xde, 0x43, 0xe6, 0x59, 0xf1, 0xe2,
	0x57, 0x66, 0x4d, 0x88, 0x90, 0x68, 0xd7, 0x92, 0x88, 0xf3, 0xa8, 0x4c, 0xeb, 0xf0, 0x46, 0x01,
	0x17, 0x96, 0xbc, 0x57, 0x1d, 0x89, 0xf3, 0x00, 0x6f, 0x11, 0x6f, 0x21, 0xed, 0x55, 0x43, 0xbd,
	0x48, 0x42, 0xff, 0x17, 0xd6, 0xed, 0x74, 0xdb, 0x7e, 0x9d, 0x00, 0x3e, 0xfe, 0x3f, 0x8b, 0x1a,
	0xb2, 0x8a, 0x98, 0x34, 0xe3, 0x8b, 0xdc, 0x91, 0x92, 0x27, 0x46, 0x0f, 0xcf, 0xbb, 0xf4, 0xb1,
	0x5c, 0x71, 0xd6, 0x64, 0xe1, 0x6a, 0x6f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x33, 0x33,
	0xf6, 0x4e, 0x01, 0x00, 0x00,
}
