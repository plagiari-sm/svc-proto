// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plagiarism/grpc_plagiarism.proto

package plagiari_sm_grpc_plagiarism

/*
Package name (~DNS)
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestDocument from Elasticsearch
type RequestDocument struct {
	// article id
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDocument) Reset()         { *m = RequestDocument{} }
func (m *RequestDocument) String() string { return proto.CompactTextString(m) }
func (*RequestDocument) ProtoMessage()    {}
func (*RequestDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_plagiarism_32ecd8e984b85025, []int{0}
}
func (m *RequestDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDocument.Unmarshal(m, b)
}
func (m *RequestDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDocument.Marshal(b, m, deterministic)
}
func (dst *RequestDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDocument.Merge(dst, src)
}
func (m *RequestDocument) XXX_Size() int {
	return xxx_messageInfo_RequestDocument.Size(m)
}
func (m *RequestDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDocument.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDocument proto.InternalMessageInfo

func (m *RequestDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Notification
type Notification struct {
	// success, error
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// label
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// article id
	Id                   string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_plagiarism_32ecd8e984b85025, []int{1}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notification.Unmarshal(m, b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
}
func (dst *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(dst, src)
}
func (m *Notification) XXX_Size() int {
	return xxx_messageInfo_Notification.Size(m)
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Notification) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Notification) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Notification) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RequestOneToManyDocument struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ToCompare            []string `protobuf:"bytes,2,rep,name=toCompare,proto3" json:"toCompare,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestOneToManyDocument) Reset()         { *m = RequestOneToManyDocument{} }
func (m *RequestOneToManyDocument) String() string { return proto.CompactTextString(m) }
func (*RequestOneToManyDocument) ProtoMessage()    {}
func (*RequestOneToManyDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_plagiarism_32ecd8e984b85025, []int{2}
}
func (m *RequestOneToManyDocument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestOneToManyDocument.Unmarshal(m, b)
}
func (m *RequestOneToManyDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestOneToManyDocument.Marshal(b, m, deterministic)
}
func (dst *RequestOneToManyDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestOneToManyDocument.Merge(dst, src)
}
func (m *RequestOneToManyDocument) XXX_Size() int {
	return xxx_messageInfo_RequestOneToManyDocument.Size(m)
}
func (m *RequestOneToManyDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestOneToManyDocument.DiscardUnknown(m)
}

var xxx_messageInfo_RequestOneToManyDocument proto.InternalMessageInfo

func (m *RequestOneToManyDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestOneToManyDocument) GetToCompare() []string {
	if m != nil {
		return m.ToCompare
	}
	return nil
}

type OneToManyResponse struct {
	Result               []*Result `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OneToManyResponse) Reset()         { *m = OneToManyResponse{} }
func (m *OneToManyResponse) String() string { return proto.CompactTextString(m) }
func (*OneToManyResponse) ProtoMessage()    {}
func (*OneToManyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_plagiarism_32ecd8e984b85025, []int{3}
}
func (m *OneToManyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneToManyResponse.Unmarshal(m, b)
}
func (m *OneToManyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneToManyResponse.Marshal(b, m, deterministic)
}
func (dst *OneToManyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneToManyResponse.Merge(dst, src)
}
func (m *OneToManyResponse) XXX_Size() int {
	return xxx_messageInfo_OneToManyResponse.Size(m)
}
func (m *OneToManyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OneToManyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OneToManyResponse proto.InternalMessageInfo

func (m *OneToManyResponse) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type Result struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Source               string   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Target               string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Score                float64  `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_plagiarism_32ecd8e984b85025, []int{4}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Result) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Result) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestDocument)(nil), "plagiari.sm.grpc.plagiarism.RequestDocument")
	proto.RegisterType((*Notification)(nil), "plagiari.sm.grpc.plagiarism.Notification")
	proto.RegisterType((*RequestOneToManyDocument)(nil), "plagiari.sm.grpc.plagiarism.RequestOneToManyDocument")
	proto.RegisterType((*OneToManyResponse)(nil), "plagiari.sm.grpc.plagiarism.OneToManyResponse")
	proto.RegisterType((*Result)(nil), "plagiari.sm.grpc.plagiarism.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlagiarismClient is the client API for Plagiarism service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlagiarismClient interface {
	// Endpoint Detect
	Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error)
	OneToMany(ctx context.Context, in *RequestOneToManyDocument, opts ...grpc.CallOption) (*OneToManyResponse, error)
}

type plagiarismClient struct {
	cc *grpc.ClientConn
}

func NewPlagiarismClient(cc *grpc.ClientConn) PlagiarismClient {
	return &plagiarismClient{cc}
}

func (c *plagiarismClient) Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/plagiari.sm.grpc.plagiarism.Plagiarism/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismClient) OneToMany(ctx context.Context, in *RequestOneToManyDocument, opts ...grpc.CallOption) (*OneToManyResponse, error) {
	out := new(OneToManyResponse)
	err := c.cc.Invoke(ctx, "/plagiari.sm.grpc.plagiarism.Plagiarism/OneToMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlagiarismServer is the server API for Plagiarism service.
type PlagiarismServer interface {
	// Endpoint Detect
	Detect(context.Context, *RequestDocument) (*Notification, error)
	OneToMany(context.Context, *RequestOneToManyDocument) (*OneToManyResponse, error)
}

func RegisterPlagiarismServer(s *grpc.Server, srv PlagiarismServer) {
	s.RegisterService(&_Plagiarism_serviceDesc, srv)
}

func _Plagiarism_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiari.sm.grpc.plagiarism.Plagiarism/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismServer).Detect(ctx, req.(*RequestDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plagiarism_OneToMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOneToManyDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismServer).OneToMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiari.sm.grpc.plagiarism.Plagiarism/OneToMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismServer).OneToMany(ctx, req.(*RequestOneToManyDocument))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plagiarism_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plagiari.sm.grpc.plagiarism.Plagiarism",
	HandlerType: (*PlagiarismServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Plagiarism_Detect_Handler,
		},
		{
			MethodName: "OneToMany",
			Handler:    _Plagiarism_OneToMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plagiarism/grpc_plagiarism.proto",
}

func init() {
	proto.RegisterFile("plagiarism/grpc_plagiarism.proto", fileDescriptor_grpc_plagiarism_32ecd8e984b85025)
}

var fileDescriptor_grpc_plagiarism_32ecd8e984b85025 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0x6c, 0xfa, 0x11, 0xc9, 0x53, 0x14, 0x17, 0x91, 0x50, 0x3d, 0xc4, 0x78, 0x89, 0x20, 0x11,
	0x2a, 0x9e, 0x3c, 0xda, 0x83, 0x17, 0xb5, 0x2c, 0xde, 0x65, 0xbb, 0x7d, 0x86, 0x40, 0x92, 0x8d,
	0xbb, 0x2f, 0x07, 0xfb, 0x87, 0xfd, 0x1b, 0x92, 0x74, 0x93, 0x2a, 0xc5, 0xaa, 0xb7, 0x9d, 0x61,
	0xde, 0xbe, 0xd9, 0x99, 0x85, 0xa0, 0xcc, 0x44, 0x92, 0x0a, 0x9d, 0x9a, 0xfc, 0x2a, 0xd1, 0xa5,
	0x7c, 0x59, 0xe3, 0xb8, 0xd4, 0x8a, 0x14, 0x3b, 0x69, 0x99, 0xd8, 0xe4, 0x71, 0x2d, 0x89, 0xd7,
	0x92, 0xf0, 0x0c, 0x0e, 0x38, 0xbe, 0x55, 0x68, 0x68, 0xaa, 0x64, 0x95, 0x63, 0x41, 0x6c, 0x1f,
	0xfa, 0xe9, 0xc2, 0x77, 0x02, 0x27, 0xf2, 0x78, 0x3f, 0x5d, 0x84, 0x4b, 0xd8, 0x7b, 0x54, 0x94,
	0xbe, 0xa6, 0x52, 0x50, 0xaa, 0x0a, 0x76, 0x0c, 0xae, 0x21, 0x41, 0x95, 0xb1, 0x1a, 0x8b, 0x18,
	0x83, 0xa1, 0x54, 0x0b, 0xf4, 0xfb, 0x81, 0x13, 0x8d, 0x78, 0x73, 0x66, 0x3e, 0xec, 0xe4, 0x68,
	0x8c, 0x48, 0xd0, 0x1f, 0x34, 0xe2, 0x16, 0xb2, 0x23, 0x18, 0x65, 0x62, 0x8e, 0x99, 0x3f, 0x6c,
	0xf8, 0x15, 0xb0, 0xbb, 0x47, 0xdd, 0xee, 0x7b, 0xf0, 0xad, 0xbd, 0xa7, 0x02, 0x9f, 0xd5, 0x83,
	0x28, 0xde, 0x7f, 0xf2, 0xc9, 0x4e, 0xc1, 0x23, 0x75, 0xa7, 0xf2, 0x52, 0xe8, 0xda, 0xc4, 0x20,
	0xf2, 0xf8, 0x9a, 0x08, 0x67, 0x70, 0xd8, 0x5d, 0xc1, 0xd1, 0x94, 0xaa, 0x30, 0xc8, 0x6e, 0xc1,
	0xe5, 0x68, 0xaa, 0x8c, 0x7c, 0x27, 0x18, 0x44, 0xbb, 0x93, 0xf3, 0x78, 0x4b, 0x56, 0xf1, 0x4a,
	0xca, 0xed, 0x48, 0xb8, 0x6c, 0x87, 0xff, 0x95, 0x48, 0xad, 0x55, 0x95, 0x96, 0x6d, 0x20, 0x16,
	0xd5, 0x3c, 0x09, 0x9d, 0x20, 0xd9, 0x40, 0x2c, 0xaa, 0x73, 0x32, 0x52, 0x69, 0x6c, 0x42, 0x71,
	0xf8, 0x0a, 0x4c, 0x3e, 0x1c, 0x80, 0x59, 0xe7, 0x8c, 0x49, 0x70, 0xa7, 0x48, 0x28, 0x89, 0x5d,
	0xfe, 0xf2, 0x82, 0x6f, 0x55, 0x8f, 0x2f, 0xb6, 0xaa, 0xbf, 0xb6, 0x1e, 0xf6, 0x18, 0x81, 0xd7,
	0x25, 0xc8, 0x6e, 0xfe, 0xb2, 0x67, 0xa3, 0xb3, 0x71, 0xbc, 0x75, 0x6c, 0xa3, 0xa0, 0xb0, 0x37,
	0x77, 0x9b, 0x4f, 0x7c, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x31, 0x7e, 0x7b, 0x7c, 0xe8, 0x02,
	0x00, 0x00,
}
