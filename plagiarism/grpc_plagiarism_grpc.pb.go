// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plagiarism

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlagiarismClient is the client API for Plagiarism service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlagiarismClient interface {
	// Endpoint Detect
	Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error)
	OneToMany(ctx context.Context, in *RequestOneToManyDocument, opts ...grpc.CallOption) (*OneToManyResponse, error)
}

type plagiarismClient struct {
	cc grpc.ClientConnInterface
}

func NewPlagiarismClient(cc grpc.ClientConnInterface) PlagiarismClient {
	return &plagiarismClient{cc}
}

func (c *plagiarismClient) Detect(ctx context.Context, in *RequestDocument, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/plagiarism.Plagiarism/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plagiarismClient) OneToMany(ctx context.Context, in *RequestOneToManyDocument, opts ...grpc.CallOption) (*OneToManyResponse, error) {
	out := new(OneToManyResponse)
	err := c.cc.Invoke(ctx, "/plagiarism.Plagiarism/OneToMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlagiarismServer is the server API for Plagiarism service.
// All implementations must embed UnimplementedPlagiarismServer
// for forward compatibility
type PlagiarismServer interface {
	// Endpoint Detect
	Detect(context.Context, *RequestDocument) (*Notification, error)
	OneToMany(context.Context, *RequestOneToManyDocument) (*OneToManyResponse, error)
	mustEmbedUnimplementedPlagiarismServer()
}

// UnimplementedPlagiarismServer must be embedded to have forward compatible implementations.
type UnimplementedPlagiarismServer struct {
}

func (UnimplementedPlagiarismServer) Detect(context.Context, *RequestDocument) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedPlagiarismServer) OneToMany(context.Context, *RequestOneToManyDocument) (*OneToManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OneToMany not implemented")
}
func (UnimplementedPlagiarismServer) mustEmbedUnimplementedPlagiarismServer() {}

// UnsafePlagiarismServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlagiarismServer will
// result in compilation errors.
type UnsafePlagiarismServer interface {
	mustEmbedUnimplementedPlagiarismServer()
}

func RegisterPlagiarismServer(s grpc.ServiceRegistrar, srv PlagiarismServer) {
	s.RegisterService(&Plagiarism_ServiceDesc, srv)
}

func _Plagiarism_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism.Plagiarism/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismServer).Detect(ctx, req.(*RequestDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plagiarism_OneToMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOneToManyDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlagiarismServer).OneToMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiarism.Plagiarism/OneToMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlagiarismServer).OneToMany(ctx, req.(*RequestOneToManyDocument))
	}
	return interceptor(ctx, in, info, handler)
}

// Plagiarism_ServiceDesc is the grpc.ServiceDesc for Plagiarism service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plagiarism_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plagiarism.Plagiarism",
	HandlerType: (*PlagiarismServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Plagiarism_Detect_Handler,
		},
		{
			MethodName: "OneToMany",
			Handler:    _Plagiarism_OneToMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plagiarism/grpc_plagiarism.proto",
}
