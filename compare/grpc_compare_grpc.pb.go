// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compare

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCCompareClient is the client API for GRPCCompare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCCompareClient interface {
	// Endpoint CompareByList
	CompareByList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Response, error)
	// Endpoint CompareById
	CompareById(ctx context.Context, in *DocId, opts ...grpc.CallOption) (*Response, error)
	// Endpoint CompareByNewDoc
	CompareByNewDoc(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Response, error)
}

type gRPCCompareClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCCompareClient(cc grpc.ClientConnInterface) GRPCCompareClient {
	return &gRPCCompareClient{cc}
}

func (c *gRPCCompareClient) CompareByList(ctx context.Context, in *List, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/compare.GRPCCompare/CompareByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCompareClient) CompareById(ctx context.Context, in *DocId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/compare.GRPCCompare/CompareById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCompareClient) CompareByNewDoc(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/compare.GRPCCompare/CompareByNewDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCCompareServer is the server API for GRPCCompare service.
// All implementations should embed UnimplementedGRPCCompareServer
// for forward compatibility
type GRPCCompareServer interface {
	// Endpoint CompareByList
	CompareByList(context.Context, *List) (*Response, error)
	// Endpoint CompareById
	CompareById(context.Context, *DocId) (*Response, error)
	// Endpoint CompareByNewDoc
	CompareByNewDoc(context.Context, *Article) (*Response, error)
}

// UnimplementedGRPCCompareServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCCompareServer struct {
}

func (UnimplementedGRPCCompareServer) CompareByList(context.Context, *List) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareByList not implemented")
}
func (UnimplementedGRPCCompareServer) CompareById(context.Context, *DocId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareById not implemented")
}
func (UnimplementedGRPCCompareServer) CompareByNewDoc(context.Context, *Article) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareByNewDoc not implemented")
}

// UnsafeGRPCCompareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCCompareServer will
// result in compilation errors.
type UnsafeGRPCCompareServer interface {
	mustEmbedUnimplementedGRPCCompareServer()
}

func RegisterGRPCCompareServer(s grpc.ServiceRegistrar, srv GRPCCompareServer) {
	s.RegisterService(&GRPCCompare_ServiceDesc, srv)
}

func _GRPCCompare_CompareByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCompareServer).CompareByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compare.GRPCCompare/CompareByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCompareServer).CompareByList(ctx, req.(*List))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCompare_CompareById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCompareServer).CompareById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compare.GRPCCompare/CompareById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCompareServer).CompareById(ctx, req.(*DocId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCompare_CompareByNewDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCompareServer).CompareByNewDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compare.GRPCCompare/CompareByNewDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCompareServer).CompareByNewDoc(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCCompare_ServiceDesc is the grpc.ServiceDesc for GRPCCompare service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCCompare_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compare.GRPCCompare",
	HandlerType: (*GRPCCompareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompareByList",
			Handler:    _GRPCCompare_CompareByList_Handler,
		},
		{
			MethodName: "CompareById",
			Handler:    _GRPCCompare_CompareById_Handler,
		},
		{
			MethodName: "CompareByNewDoc",
			Handler:    _GRPCCompare_CompareByNewDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compare/grpc_compare.proto",
}
