syntax = "proto3";

// Package name (~DNS)
package plagiari.sm.grpc.scrape;

// GRPCScrape Service
service GRPCScrape {
    // Endpoint Scrape
    rpc Scrape(RequestStream) returns (Response) {};
    // Endpoint SimpleScrape
    rpc SimpleScrape(RequestArticle) returns (Response) {};
}

// RequestArticle for SimpleScrape
message RequestArticle {
    string feed     = 1;
    string url      = 2;
}

// RequestStream for Scrape in Streaming mode (ex. svc-listen)
message RequestStream {
    string feed         = 1;
    string url          = 2;
    int64 tweetId       = 3;
    string lang         = 4;
    string screenName   = 5;
    string publishedAt  = 6;
    string crawledAt    = 7;
}

// Content of the Scraped Article or Stream
message Content {
    string title                = 1;
    string excerpt              = 2;
    string body                 = 3;
    repeated string authors     = 4;
    repeated string sources     = 5;
    repeated string tags        = 6;
    repeated string categories  = 7;
    string publishedAt          = 8;
    string editedAt             = 9;
}

// NLP data of the Scraped Article or Stream
message NLP {
    repeated string tokens      = 1;
    repeated string stopWords  = 2;
}

// Data for the Response Object
message Data {
    Content content = 1;
    NLP  nlp        = 2;
}

// Response Object
message Response {
    // success, error
    string status   = 1;
    // 200, 500
    int32 code      = 2;
    // message
    string message  = 3;
    // data Object {}
    Data data       = 4;
}
