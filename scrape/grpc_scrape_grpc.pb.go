// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scrape

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCScrapeClient is the client API for GRPCScrape service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCScrapeClient interface {
	// Endpoint Scrape
	Scrape(ctx context.Context, in *RequestStream, opts ...grpc.CallOption) (*Response, error)
	// Endpoint SimpleScrape
	SimpleScrape(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (*Response, error)
	// Endpoint ReloadPassages
	ReloadPassages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type gRPCScrapeClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCScrapeClient(cc grpc.ClientConnInterface) GRPCScrapeClient {
	return &gRPCScrapeClient{cc}
}

func (c *gRPCScrapeClient) Scrape(ctx context.Context, in *RequestStream, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scrape.GRPCScrape/Scrape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCScrapeClient) SimpleScrape(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scrape.GRPCScrape/SimpleScrape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCScrapeClient) ReloadPassages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scrape.GRPCScrape/ReloadPassages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCScrapeServer is the server API for GRPCScrape service.
// All implementations should embed UnimplementedGRPCScrapeServer
// for forward compatibility
type GRPCScrapeServer interface {
	// Endpoint Scrape
	Scrape(context.Context, *RequestStream) (*Response, error)
	// Endpoint SimpleScrape
	SimpleScrape(context.Context, *RequestArticle) (*Response, error)
	// Endpoint ReloadPassages
	ReloadPassages(context.Context, *Empty) (*Response, error)
}

// UnimplementedGRPCScrapeServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCScrapeServer struct {
}

func (UnimplementedGRPCScrapeServer) Scrape(context.Context, *RequestStream) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrape not implemented")
}
func (UnimplementedGRPCScrapeServer) SimpleScrape(context.Context, *RequestArticle) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleScrape not implemented")
}
func (UnimplementedGRPCScrapeServer) ReloadPassages(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadPassages not implemented")
}

// UnsafeGRPCScrapeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCScrapeServer will
// result in compilation errors.
type UnsafeGRPCScrapeServer interface {
	mustEmbedUnimplementedGRPCScrapeServer()
}

func RegisterGRPCScrapeServer(s grpc.ServiceRegistrar, srv GRPCScrapeServer) {
	s.RegisterService(&GRPCScrape_ServiceDesc, srv)
}

func _GRPCScrape_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCScrapeServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrape.GRPCScrape/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCScrapeServer).Scrape(ctx, req.(*RequestStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCScrape_SimpleScrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCScrapeServer).SimpleScrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrape.GRPCScrape/SimpleScrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCScrapeServer).SimpleScrape(ctx, req.(*RequestArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCScrape_ReloadPassages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCScrapeServer).ReloadPassages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrape.GRPCScrape/ReloadPassages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCScrapeServer).ReloadPassages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCScrape_ServiceDesc is the grpc.ServiceDesc for GRPCScrape service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCScrape_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scrape.GRPCScrape",
	HandlerType: (*GRPCScrapeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _GRPCScrape_Scrape_Handler,
		},
		{
			MethodName: "SimpleScrape",
			Handler:    _GRPCScrape_SimpleScrape_Handler,
		},
		{
			MethodName: "ReloadPassages",
			Handler:    _GRPCScrape_ReloadPassages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape/grpc_scrape.proto",
}
