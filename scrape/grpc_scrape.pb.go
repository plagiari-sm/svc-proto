// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scrape/grpc_scrape.proto

/*
Package plagiari_sm_grpc_scrape is a generated protocol buffer package.

Package name (~DNS)

It is generated from these files:
	scrape/grpc_scrape.proto

It has these top-level messages:
	RequestArticle
	RequestStream
	Content
	NLP
	Data
	Response
*/
package plagiari_sm_grpc_scrape

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestArticle for SimpleScrape
type RequestArticle struct {
	Feed string `protobuf:"bytes,1,opt,name=feed" json:"feed,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *RequestArticle) Reset()                    { *m = RequestArticle{} }
func (m *RequestArticle) String() string            { return proto.CompactTextString(m) }
func (*RequestArticle) ProtoMessage()               {}
func (*RequestArticle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestArticle) GetFeed() string {
	if m != nil {
		return m.Feed
	}
	return ""
}

func (m *RequestArticle) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// RequestStream for Scrape in Streaming mode (ex. svc-listen)
type RequestStream struct {
	Feed       string `protobuf:"bytes,1,opt,name=feed" json:"feed,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	TweetId    int64  `protobuf:"varint,3,opt,name=tweetId" json:"tweetId,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	ScreenName string `protobuf:"bytes,5,opt,name=screenName" json:"screenName,omitempty"`
}

func (m *RequestStream) Reset()                    { *m = RequestStream{} }
func (m *RequestStream) String() string            { return proto.CompactTextString(m) }
func (*RequestStream) ProtoMessage()               {}
func (*RequestStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestStream) GetFeed() string {
	if m != nil {
		return m.Feed
	}
	return ""
}

func (m *RequestStream) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RequestStream) GetTweetId() int64 {
	if m != nil {
		return m.TweetId
	}
	return 0
}

func (m *RequestStream) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *RequestStream) GetScreenName() string {
	if m != nil {
		return m.ScreenName
	}
	return ""
}

// Content of the Scraped Article or Stream
type Content struct {
	Title       string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Excerpt     string   `protobuf:"bytes,2,opt,name=excerpt" json:"excerpt,omitempty"`
	Body        string   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Authors     []string `protobuf:"bytes,4,rep,name=authors" json:"authors,omitempty"`
	Sources     []string `protobuf:"bytes,5,rep,name=sources" json:"sources,omitempty"`
	Tags        []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Categories  []string `protobuf:"bytes,7,rep,name=categories" json:"categories,omitempty"`
	PublishedAt string   `protobuf:"bytes,8,opt,name=publishedAt" json:"publishedAt,omitempty"`
	EditedAt    string   `protobuf:"bytes,9,opt,name=editedAt" json:"editedAt,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Content) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *Content) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Content) GetAuthors() []string {
	if m != nil {
		return m.Authors
	}
	return nil
}

func (m *Content) GetSources() []string {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *Content) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Content) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Content) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *Content) GetEditedAt() string {
	if m != nil {
		return m.EditedAt
	}
	return ""
}

// NLP data of the Scraped Article or Stream
type NLP struct {
	Tokens    []string `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	StopWords []string `protobuf:"bytes,2,rep,name=stopWords" json:"stopWords,omitempty"`
}

func (m *NLP) Reset()                    { *m = NLP{} }
func (m *NLP) String() string            { return proto.CompactTextString(m) }
func (*NLP) ProtoMessage()               {}
func (*NLP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NLP) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *NLP) GetStopWords() []string {
	if m != nil {
		return m.StopWords
	}
	return nil
}

// Data for the Response Object
type Data struct {
	Content *Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Nlp     *NLP     `protobuf:"bytes,2,opt,name=nlp" json:"nlp,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Data) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Data) GetNlp() *NLP {
	if m != nil {
		return m.Nlp
	}
	return nil
}

// Response Object
type Response struct {
	// success, error
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// 200, 500
	Code int32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// data Object {}
	Data *Data `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestArticle)(nil), "plagiari.sm.grpc.scrape.RequestArticle")
	proto.RegisterType((*RequestStream)(nil), "plagiari.sm.grpc.scrape.RequestStream")
	proto.RegisterType((*Content)(nil), "plagiari.sm.grpc.scrape.Content")
	proto.RegisterType((*NLP)(nil), "plagiari.sm.grpc.scrape.NLP")
	proto.RegisterType((*Data)(nil), "plagiari.sm.grpc.scrape.Data")
	proto.RegisterType((*Response)(nil), "plagiari.sm.grpc.scrape.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPCScrape service

type GRPCScrapeClient interface {
	// Endpoint Scrape
	Scrape(ctx context.Context, in *RequestStream, opts ...grpc.CallOption) (*Response, error)
	// Endpoint SimpleScrape
	SimpleScrape(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (*Response, error)
}

type gRPCScrapeClient struct {
	cc *grpc.ClientConn
}

func NewGRPCScrapeClient(cc *grpc.ClientConn) GRPCScrapeClient {
	return &gRPCScrapeClient{cc}
}

func (c *gRPCScrapeClient) Scrape(ctx context.Context, in *RequestStream, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/plagiari.sm.grpc.scrape.GRPCScrape/Scrape", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCScrapeClient) SimpleScrape(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/plagiari.sm.grpc.scrape.GRPCScrape/SimpleScrape", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GRPCScrape service

type GRPCScrapeServer interface {
	// Endpoint Scrape
	Scrape(context.Context, *RequestStream) (*Response, error)
	// Endpoint SimpleScrape
	SimpleScrape(context.Context, *RequestArticle) (*Response, error)
}

func RegisterGRPCScrapeServer(s *grpc.Server, srv GRPCScrapeServer) {
	s.RegisterService(&_GRPCScrape_serviceDesc, srv)
}

func _GRPCScrape_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCScrapeServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiari.sm.grpc.scrape.GRPCScrape/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCScrapeServer).Scrape(ctx, req.(*RequestStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCScrape_SimpleScrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCScrapeServer).SimpleScrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plagiari.sm.grpc.scrape.GRPCScrape/SimpleScrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCScrapeServer).SimpleScrape(ctx, req.(*RequestArticle))
	}
	return interceptor(ctx, in, info, handler)
}

var _GRPCScrape_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plagiari.sm.grpc.scrape.GRPCScrape",
	HandlerType: (*GRPCScrapeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _GRPCScrape_Scrape_Handler,
		},
		{
			MethodName: "SimpleScrape",
			Handler:    _GRPCScrape_SimpleScrape_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape/grpc_scrape.proto",
}

func init() { proto.RegisterFile("scrape/grpc_scrape.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x8b, 0x14, 0x31,
	0x10, 0xb5, 0xb7, 0xe7, 0xb3, 0x46, 0x45, 0x82, 0x68, 0x58, 0x56, 0x19, 0xfb, 0xa0, 0x7b, 0x6a,
	0x71, 0x04, 0x0f, 0x7a, 0x5a, 0x56, 0x10, 0x61, 0x19, 0x86, 0x0c, 0xe2, 0x45, 0x90, 0x4c, 0x77,
	0xd9, 0xdb, 0xd8, 0xd3, 0x89, 0x49, 0x35, 0xea, 0xd9, 0x5f, 0xe6, 0x6f, 0xf2, 0x0f, 0x48, 0xaa,
	0x33, 0x3a, 0x1e, 0xc6, 0xdd, 0xdb, 0x7b, 0xf5, 0xaa, 0x2a, 0x2f, 0x95, 0x0a, 0x48, 0x5f, 0x38,
	0x6d, 0xf1, 0x69, 0xe5, 0x6c, 0xf1, 0xb1, 0xc7, 0xb9, 0x75, 0x86, 0x8c, 0xb8, 0x6f, 0x1b, 0x5d,
	0xd5, 0xda, 0xd5, 0xb9, 0xdf, 0xe6, 0x41, 0xce, 0x7b, 0x39, 0x7b, 0x01, 0xb7, 0x15, 0x7e, 0xe9,
	0xd0, 0xd3, 0x99, 0xa3, 0xba, 0x68, 0x50, 0x08, 0x18, 0x7c, 0x42, 0x2c, 0x65, 0x32, 0x4f, 0x4e,
	0xa7, 0x8a, 0xb1, 0xb8, 0x03, 0x69, 0xe7, 0x1a, 0x79, 0xc4, 0xa1, 0x00, 0xb3, 0x1f, 0x09, 0xdc,
	0x8a, 0x85, 0x6b, 0x72, 0xa8, 0xb7, 0xd7, 0xab, 0x13, 0x12, 0xc6, 0xf4, 0x15, 0x91, 0xde, 0x96,
	0x32, 0x9d, 0x27, 0xa7, 0xa9, 0xda, 0xd1, 0x50, 0xdf, 0xe8, 0xb6, 0x92, 0x83, 0xbe, 0x3e, 0x60,
	0xf1, 0x10, 0xc0, 0x17, 0x0e, 0xb1, 0x5d, 0xea, 0x2d, 0xca, 0x21, 0x2b, 0x7b, 0x91, 0xec, 0x57,
	0x02, 0xe3, 0x73, 0xd3, 0x12, 0xb6, 0x24, 0xee, 0xc2, 0x90, 0x6a, 0x6a, 0x30, 0x1a, 0xe8, 0x49,
	0x38, 0x0f, 0xbf, 0x15, 0xe8, 0x2c, 0x45, 0x17, 0x3b, 0x1a, 0xce, 0xdb, 0x98, 0xf2, 0x3b, 0xdb,
	0x98, 0x2a, 0xc6, 0x21, 0x5b, 0x77, 0x74, 0x69, 0x9c, 0x97, 0x83, 0x79, 0x1a, 0xb2, 0x23, 0x0d,
	0x8a, 0x37, 0x9d, 0x2b, 0xd0, 0xcb, 0x61, 0xaf, 0x44, 0x1a, 0xfa, 0x90, 0xae, 0xbc, 0x1c, 0x71,
	0x98, 0x71, 0xf0, 0x5d, 0x68, 0xc2, 0xca, 0xb8, 0x1a, 0xbd, 0x1c, 0xb3, 0xb2, 0x17, 0x11, 0x73,
	0x98, 0xd9, 0x6e, 0xd3, 0xd4, 0xfe, 0x12, 0xcb, 0x33, 0x92, 0x13, 0xb6, 0xb0, 0x1f, 0x12, 0xc7,
	0x30, 0xc1, 0xb2, 0x26, 0x96, 0xa7, 0x2c, 0xff, 0xe1, 0xd9, 0x2b, 0x48, 0x97, 0x17, 0x2b, 0x71,
	0x0f, 0x46, 0x64, 0x3e, 0x63, 0xeb, 0x65, 0xc2, 0x07, 0x44, 0x26, 0x4e, 0x60, 0xea, 0xc9, 0xd8,
	0xf7, 0xc6, 0x95, 0x5e, 0x1e, 0xb1, 0xf4, 0x37, 0x90, 0x39, 0x18, 0xbc, 0xd6, 0xa4, 0xc5, 0x4b,
	0x18, 0x17, 0xfd, 0xe4, 0x78, 0x60, 0xb3, 0xc5, 0x3c, 0x3f, 0xb0, 0x23, 0x79, 0x9c, 0xb0, 0xda,
	0x15, 0x88, 0x1c, 0xd2, 0xb6, 0xb1, 0x3c, 0xd0, 0xd9, 0xe2, 0xe4, 0x60, 0xdd, 0xf2, 0x62, 0xa5,
	0x42, 0x62, 0x58, 0x96, 0x89, 0x42, 0x6f, 0x4d, 0xeb, 0x31, 0xd8, 0xf6, 0xa4, 0xa9, 0xf3, 0xf1,
	0xa1, 0x22, 0x0b, 0x73, 0x2c, 0x4c, 0x89, 0xdc, 0x75, 0xa8, 0x18, 0x87, 0xa9, 0x6f, 0xd1, 0x7b,
	0x5d, 0x61, 0x7c, 0xa6, 0x1d, 0x15, 0xcf, 0x60, 0x50, 0x6a, 0xd2, 0xbc, 0x2d, 0xb3, 0xc5, 0x83,
	0x83, 0x1e, 0xc2, 0x5d, 0x15, 0xa7, 0x2e, 0x7e, 0x26, 0x00, 0x6f, 0xd4, 0xea, 0x7c, 0xcd, 0x8a,
	0x78, 0x07, 0xa3, 0x88, 0x1e, 0x1f, 0xac, 0xfe, 0x67, 0xc3, 0x8f, 0x1f, 0xfd, 0x27, 0xaf, 0xbf,
	0x5c, 0x76, 0x43, 0x7c, 0x80, 0x9b, 0xeb, 0x7a, 0x6b, 0x1b, 0x8c, 0xcd, 0x9f, 0x5c, 0xd5, 0x3c,
	0xfe, 0xbb, 0x6b, 0x75, 0xdf, 0x8c, 0xf8, 0x3b, 0x3f, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x76, 0x2a, 0xf1, 0xea, 0x03, 0x00, 0x00,
}
